+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ Question-1:

Given preorder of a binary tree, calculate itsÂ **[depth(or height)](https://www.geeksforgeeks.org/write-a-c-program-to-find-the-maximum-depth-or-height-of-a-tree/)**Â [starting from depth 0]. The preorder is given as a string with two possible characters.

1. â€˜lâ€™ denotes the leaf
2. â€˜nâ€™ denotes internal node

The given tree can be seen as a full binary tree where every node has 0 or two children. The two children of a node can â€˜nâ€™ or â€˜lâ€™ or mix of both.

**Examples :**

Input  : nlnll
Output : 2

Input  : nlnnlll
Output : 3
----


+*In[1]:*+
[source, ipython3]
----
def calculate_depth(preorder):
    depth = 0
    stack = []

    for char in preorder:
        if char == 'n':
            # Internal node, push to stack
            stack.append(char)
        elif char == 'l':
            # Leaf node, calculate depth based on stack size
            depth = max(depth, len(stack))
        else:
            raise ValueError("Invalid character in the preorder traversal")

    return depth

# Example 1:
preorder1 = "nlnll"
depth1 = calculate_depth(preorder1)
print("Example 1:")
print("Preorder:", preorder1)
print("Depth:", depth1)

# Example 2:
preorder2 = "nlnnlll"
depth2 = calculate_depth(preorder2)
print("Example 2:")
print("Preorder:", preorder2)
print("Depth:", depth2)
----


+*Out[1]:*+
----
Example 1:
Preorder: nlnll
Depth: 2
Example 2:
Preorder: nlnnlll
Depth: 3
----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ Question-2:

Given aÂ Binary tree, the task is to print theÂ **left view**Â of the Binary Tree. The left view of a Binary Tree is a set of leftmost nodes for every level.

**Examples:**

***Input:***

            4

          / Â  \

        5 Â  Â  2

             / Â  \

            3 Â  Â  1

           / Â \

          6 Â  Â 7

***Output:**Â 4 5 3 6*

***Input:***

                    1

                  / Â  \

                2 Â  Â  Â  3

                 \

                   4

                     \

                        5

                           \

                             6

**Output:**Â 1 2 4 5 6
----


+*In[2]:*+
[source, ipython3]
----
class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def print_left_view(root):
    if root is None:
        return

    queue = [(root, 1)]  # Queue to perform level-order traversal
    level_map = {}  # Map to store the leftmost node at each level

    while queue:
        node, level = queue.pop(0)

        if level not in level_map:
            # First node encountered at this level, print it
            print(node.value, end=' ')
            level_map[level] = node

        if node.left:
            queue.append((node.left, level + 1))
        if node.right:
            queue.append((node.right, level + 1))

# Construct the given binary tree
root = TreeNode(4)
root.left = TreeNode(5)
root.right = TreeNode(2)
root.right.left = TreeNode(3)
root.right.right = TreeNode(1)
root.right.left.left = TreeNode(6)
root.right.left.right = TreeNode(7)

# Print the left view of the binary tree
print("Left view of the binary tree:")
print_left_view(root)
----


+*Out[2]:*+
----
Left view of the binary tree:
4 5 3 6 ----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ Question-3:

Given a Binary Tree, print the Right view of it.

TheÂ right view of a Binary TreeÂ is a set of nodes visible when the tree is visited from the Right side.

**Examples:**

**Input:**

         1

      / Â  Â  \

   2 Â  Â   Â  Â 3

/ Â  \ Â  Â  Â  / Â \

4 Â  Â  5 Â  6 Â  Â 7

             \

               8

**Output**: 

Right view of the tree is 1 3 7 8

**Input:**

         1

       /

    8

  /

7

**Output**: 

Right view of the tree is 1 8 7

</aside>
----


+*In[3]:*+
[source, ipython3]
----
class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def print_right_view(root):
    if root is None:
        return

    queue = [(root, 1)]  # Queue to perform level-order traversal
    level_map = {}  # Map to store the rightmost node at each level

    while queue:
        node, level = queue.pop(0)

        # Update the level-node mapping at each level
        level_map[level] = node.value

        if node.left:
            queue.append((node.left, level + 1))
        if node.right:
            queue.append((node.right, level + 1))

    # Print the rightmost nodes from the level map
    for level in sorted(level_map.keys()):
        print(level_map[level], end=' ')

# Construct the given binary tree
root = TreeNode(1)
root.left = TreeNode(2)
root.right = TreeNode(3)
root.left.left = TreeNode(4)
root.left.right = TreeNode(5)
root.right.left = TreeNode(6)
root.right.right = TreeNode(7)
root.right.right.right = TreeNode(8)

# Print the right view of the binary tree
print("Right view of the binary tree:")
print_right_view(root)
----


+*Out[3]:*+
----
Right view of the binary tree:
1 3 7 8 ----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----
<aside>
ðŸ’¡ Question-4:

Given a Binary Tree, The task is to print theÂ **bottom view**Â from left to right. A nodeÂ **x**Â is there in output if x is the bottommost node at its horizontal distance. The horizontal distance of the left child of a node x is equal to a horizontal distance of x minus 1, and that of a right child is the horizontal distance of x plus 1.

**Examples:**

**Input:**

             20

           / Â  Â  \

        8 Â  Â  Â  Â  22

    / Â  Â  Â \ Â  Â  Â  Â  \

5 Â  Â  Â  Â  3 Â  Â  Â  Â 25

        / Â  Â \

   10 Â  Â  Â  14

**Output:**Â 5, 10, 3, 14, 25.

**Input:**

             20

           / Â  Â  \

        8 Â  Â  Â  Â  22

    / Â  Â  Â \ Â  Â  Â / Â  \

 5 Â  Â  Â  Â  3 Â   4 Â  Â  25

         / Â  Â \

     10 Â  Â  Â  14

**Output:**

5 10 4 14 25.

**Explanation:**

If there are multiple bottom-most nodes for a horizontal distance from the root, then print the later one in the level traversal.

**3 and 4** are both the bottom-most nodes at a horizontal distance of 0, we need to print 4.

</aside>
----


+*In[4]:*+
[source, ipython3]
----
from collections import deque

class TreeNode:
    def __init__(self, value):
        self.value = value
        self.left = None
        self.right = None

def print_bottom_view(root):
    if root is None:
        return

    # Initialize variables for horizontal distance tracking
    hd_map = {}
    min_hd = float('inf')
    max_hd = float('-inf')

    # Perform level-order traversal using a queue
    queue = deque([(root, 0)])

    while queue:
        node, hd = queue.popleft()

        # Update the min and max horizontal distances
        min_hd = min(min_hd, hd)
        max_hd = max(max_hd, hd)

        # Update the node value in the map for the current horizontal distance
        hd_map[hd] = node.value

        if node.left:
            queue.append((node.left, hd - 1))
        if node.right:
            queue.append((node.right, hd + 1))

    # Print the nodes from the map in ascending order of their horizontal distance
    for hd in range(min_hd, max_hd + 1):
        print(hd_map[hd], end=' ')

# Construct the given binary tree
root = TreeNode(20)
root.left = TreeNode(8)
root.right = TreeNode(22)
root.left.left = TreeNode(5)
root.left.right = TreeNode(3)
root.left.right.left = TreeNode(10)
root.left.right.right = TreeNode(14)
root.right.right = TreeNode(25)

# Print the bottom view of the binary tree
print("Bottom view of the binary tree:")
print_bottom_view(root)
----


+*Out[4]:*+
----
Bottom view of the binary tree:
5 10 3 14 25 ----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----
